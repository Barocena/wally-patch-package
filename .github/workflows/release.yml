name: Release

on:
  push:
    tags: ["*"]
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
  release:
    needs: ["create-release"]

    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: wally-patch-package-win64
            pkg-target: latest-win-x64
          - os: ubuntu-20.04
            artifact-name: wally-patch-package-linux
            pkg-target: latest-linux-x64
          - os: macos-latest
            artifact-name: wally-patch-package-macos
            pkg-target: latest-macos-x64
          - os: macos-latest
            artifact-name: wally-patch-package-macos-aarch64
            pkg-target: latest-macos-arm64

    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build program
        run: |
          npm install @yao-pkg/pkg -g
          npm run transpile;
          pkg --no-bytecode --public --targets ${{matrix.pkg-target}} --public-packages '*' --compress brotli --out-path bin build/app.js;
          npm run clean;

      - name: Archive files
        shell: bash
        run: |
          mkdir -p staging

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "output/release/wally-patch-package.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "output/release/wally-patch-package" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ matrix.artifact-name }}.zip
          asset_content_type: application/octet-stream
